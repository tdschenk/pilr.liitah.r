{
    "contents" : "## Summary data table generated in HTML format\n## (?) How to handle multiple participants (?)\n#' @export\nfull_table <- function(data, params, ...) {\n  log <- data$log\n  venue <- data$venue\n  ## BASIC SUMMARY\n  ## Deprecated date filter stuff\n  #log$local_time = log$local_time %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%SZ\")\n  #log = log[log$local_time > filterStart & log$local_time < filterEnd, ]\n  #venues = venues[venues$local_time > filterStart & venues$local_time < filterEnd, ]\n  #filterStart = filterStart %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%SZ\")\n  #filterEnd = filterEnd %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%SZ\")\n  \n  log$local_time = log$local_time %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%SZ\")\n  #log = log[log$local_time > filterStart & log$local_time < filterEnd, ]\n  if (nrow(venue) != 0) venue$local_time = venue$local_time %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%SZ\")\n  # ==== Summarize data ====\n  # Query data for some summary measures\n  polls = log[log$tag == \"POLLING_SERVICE_ANDROID\", ]\n  polls_at_location = polls[polls$args.category == \"at_venue\", ]\n  triggers = log[log$tag == 'ARRIVAL_TRIGGER',]\n  # This line for MANUAL_ARRIVAL\n  training_recs = log[log$tag == 'MANUAL_ARRIVAL',]\n  \n  # Create Matrix\n  mx <- matrix(nrow = 1, ncol = 14)\n  rownames(mx) <- c(paste0(data$pt[1]))\n  colnames(mx) <- c(\"pt\", \"Total_Venues\", \"Total_Triggers\", \"Last_Trigger\", \"Last_Venue_Added\",\n                    \"Polls_at_Venue\", \"Hot_Polls\", \"Warm_Polls\", \"Cold_Polls\", \"Total_Polls\",\n                    \"First_Poll\", \"Last_Poll\", \"Last_Manual_Arrival_log\",\n                    \"Total_Manual_Arrival_Logs\")\n  \n  mx[1,1] <- log$pt[1]\n  mx[1,2] <- nrow(venue)\n  mx[1,3] <- nrow(triggers)\n  mx[1,4] <- max(triggers$local_time) %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%S\") %>% as.character()\n  mx[1,5] <- max(venue$local_time) %>% as.character()\n  mx[1,6] <-  nrow(polls_at_location)\n  mx[1,7] <- polls[polls$args.category == \"hot\", ] %>% nrow()\n  mx[1,8] <- polls[polls$args.category == \"warm\", ] %>% nrow()\n  mx[1,9] <- polls[polls$args.category == \"cold\", ] %>% nrow()\n  mx[1,10] <- nrow(polls)\n  mx[1,11] <- min(log$local_time) %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%S\") %>% as.character()\n  mx[1,12] <- max(log$local_time) %>% as.POSIXlt(format = \"%Y-%m-%dT%H:%M:%S\") %>% as.character()\n  mx[1,13] <- max(training_recs$local_time) %>% as.character()\n  mx[1,14] <- nrow(training_recs)\n  \n  print(xtable(mx), type = \"html\")\n}\n\n## Bar graph of hot/warm/cold polls per day for one participant\n#' @export\npolls_per_day <- function(data, params, ...) {\n  data <- data$log\n  polls <- data[data$tag == \"POLLING_SERVICE_ANDROID\", ]\n  polls$day <- substr(polls$local_time, 0, 10)\n  polls <- polls[polls$args.category != \"\", ]\n  days <- unique(polls$day)\n  \n  # Count polls per day\n  summary <- data.frame(day = character(), category = character(), count = numeric())\n  for (i in 1:length(days)) {\n    polls_sub <- polls[polls$day == days[i], ]\n    cold <- nrow(polls_sub[polls_sub$args.category == \"cold\",])\n    warm <- nrow(polls_sub[polls_sub$args.category == \"warm\",])\n    hot <- nrow(polls_sub[polls_sub$args.category == \"hot\",])\n    at_venue <- nrow(polls_sub[polls_sub$args.category == \"at_venue\",])\n    summary <- rbind(summary, data.frame(day = days[i], category = \"cold\", count = cold))\n    summary <- rbind(summary, data.frame(day = days[i], category = \"warm\", count = warm))\n    summary <- rbind(summary, data.frame(day = days[i], category = \"hot\", count = hot))\n    summary <- rbind(summary, data.frame(day = days[i], category = \"at_venue\", count = at_venue))\n  }\n  \n  summary %>%\n    ggvis(x = ~day, y = ~count, fill = ~category) %>%\n    layer_bars() %>%\n    add_axis(\"x\", title = \"\",\n             properties = axis_props(labels = list(angle = 45, align = \"left\"))) %>%\n    add_axis(\"y\", title = \"Polls\")\n}\n\n## Bar graph of total triggers per day\n#' @export\ntriggers_per_day <- function(data, params, ...) {\n  data <- data$log\n  triggers <- data[data$tag == 'ARRIVAL_TRIGGER',]\n  triggers$day <- substr(triggers$local_time, 0, 10)\n  triggers %>%\n    ggvis(x = ~day, fill := \"#663300\") %>%\n    layer_bars() %>%\n    add_axis(\"x\", title = \"\",\n             properties = axis_props(labels = list(angle = 45, align = \"left\"))) %>%\n    add_axis(\"y\", title = \"Triggers\")\n}",
    "created" : 1433538602871.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1266958346",
    "id" : "5459141B",
    "lastKnownWriteTime" : 1434489007,
    "path" : "~/GitHub/pilr.liitah.r/R/liitah-dashboards.r",
    "project_path" : "R/liitah-dashboards.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}